<?xml version="1.0"?>
<doc>
    <assembly>
        <name>wiz.player.ui</name>
    </assembly>
    <members>
        <member name="T:wiz.player.ui.MainForm">
            <summary>
            wizPlayer的主窗体类
            </summary>
        </member>
        <member name="M:wiz.player.ui.MainForm.#ctor">
            <summary>
            构造方法，完成UI的初始化
            </summary>
        </member>
        <member name="M:wiz.player.ui.MainForm.OnEngineInited(wiz.WIZPlayer,System.IntPtr)">
            <summary>
            响应Player初始化消息
            </summary>
            <param name="player"></param>
            <param name="param"></param>
        </member>
        <member name="M:wiz.player.ui.MainForm.OnEngineToolRegister(wiz.WIZPlayer,System.IntPtr)">
            <summary>
            响应工具注册消息
            </summary>
            <param name="player"></param>
            <param name="param"></param>
        </member>
        <member name="M:wiz.player.ui.MainForm.OnLoadModel(wiz.WIZPlayer,System.IntPtr)">
            <summary>
            响应Player加载模型完成消息
            </summary>
            <param name="player"></param>
            <param name="param"></param>
        </member>
        <member name="M:wiz.player.ui.MainForm.OnEngineSelectTool(wiz.WIZPlayer,System.IntPtr)">
            <summary>
            响应Player切换工具消息
            </summary>
            <param name="player"></param>
            <param name="param"></param>
        </member>
        <member name="M:wiz.player.ui.MainForm.MainForm_Load(System.Object,System.EventArgs)">
            <summary>
            主窗体加载完成事件响应，在这里我们完成Player的初始设定并启动Player
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:wiz.player.ui.MainForm.WizPlane_SizeChanged(System.Object,System.EventArgs)">
            <summary>
            响应容纳Player的父窗体大小发生变化消息，这里我们同时通知Player做响应的大小变化
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:wiz.player.ui.MainForm.OpenBtn_Click(System.Object,System.EventArgs)">
            <summary>
            点击打开按钮事件，待用户选择文件后通知Player加载模型
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:wiz.player.ui.MainForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:wiz.player.ui.MainForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:wiz.player.ui.MainForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="M:wiz.player.ui.Program.Main">
            <summary>
            应用程序的主入口点。
            </summary>
        </member>
        <member name="F:wiz.player.ui.TextInputDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:wiz.player.ui.TextInputDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:wiz.player.ui.TextInputDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:wiz.player.ui.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:wiz.player.ui.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:wiz.player.ui.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="T:wiz.WIZCameraAnimation">
            <summary>
            相机动画组件
            </summary>
        </member>
        <member name="M:wiz.WIZCameraAnimation.From(wiz.WIZPlayer)">
            <summary>
            组件获取方法
            </summary>
            <param name="player">目标Player</param>
            <returns>需要判断是否成功</returns>
            <seealso cref="M:wiz.WIZCameraAnimation.isValid"/>
        </member>
        <member name="M:wiz.WIZCameraAnimation.isValid">
            <summary>
            判断该组件是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:wiz.WIZCameraAnimation.setEdit(System.Boolean)">
            <summary>
            设置编辑状态
            </summary>
            <param name="state">编辑状态</param>
        </member>
        <member name="M:wiz.WIZCameraAnimation.createCamera(System.Int32)">
            <summary>
            创建虚拟相机
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:wiz.WIZCameraAnimation.deleteCamera">
            <summary>
            删除相机
            </summary>
        </member>
        <member name="M:wiz.WIZCameraAnimation.goToVirtualCamera">
            <summary>
            前往虚拟相机
            </summary>
        </member>
        <member name="M:wiz.WIZCameraAnimation.goBackRealCamera">
            <summary>
            回到真实相机
            </summary>
        </member>
        <member name="M:wiz.WIZCameraAnimation.playCameraAnimation(System.Boolean)">
            <summary>
            播放或停止当前相机动画
            </summary>
            <param name="run">播放或停止</param>
        </member>
        <member name="M:wiz.WIZCameraAnimation.clear">
            <summary>
            清楚所有虚拟相机
            </summary>
        </member>
        <member name="M:wiz.WIZCameraAnimation.setCurTime(System.Int32)">
            <summary>
            设置当前时间点
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:wiz.WIZCameraAnimation.save(System.String,System.String)">
            <summary>
            保存当前摄像机动画
            </summary>
        </member>
        <member name="T:wiz.WIZCameraAnimation.Const">
            <summary>
            常量及结构定义
            </summary>
        </member>
        <member name="F:wiz.WIZCameraAnimation.Const.PMSG_CAM_DELETE">
            <summary>
            删除相机动作的消息名称，该消息附带参数结构为int，标识相机的索引
            </summary>
        </member>
        <member name="F:wiz.WIZCameraAnimation.Const.PMSG_CAM_CURTIME">
            <summary>
            当相机预览时的当前时间消息称，该消息附带参数机构为int，标识当前时间
            </summary>
        </member>
        <member name="T:wiz.WIZCameraAnimationPlay">
            <summary>
            动画播放组件
            </summary>
        </member>
        <member name="M:wiz.WIZCameraAnimationPlay.From(wiz.WIZPlayer)">
            <summary>
            组件获取方法
            </summary>
            <param name="player">目标Player</param>
            <returns>需要判断是否成功</returns>
            <seealso cref="M:wiz.WIZCameraAnimationPlay.isValid"/>
        </member>
        <member name="M:wiz.WIZCameraAnimationPlay.isValid">
            <summary>
            判断该组件是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:wiz.WIZCameraAnimationPlay.load(System.String)">
            <summary>
            加载模型动画文件
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:wiz.WIZCameraAnimationPlay.getAnimCount">
            <summary>
            获取动画个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:wiz.WIZCameraAnimationPlay.getAnimName(System.Int32)">
            <summary>
            获取动画名称
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:wiz.WIZCameraAnimationPlay.playAnim(System.Boolean,System.Int32)">
            <summary>
            播放或停止动画
            </summary>
            <param name="run"></param>
            <param name="idx"></param>
        </member>
        <member name="T:wiz.wizCameraAnimationNative">
            <summary>
            C++层导出的接口原形
            </summary>
        </member>
        <member name="T:wiz.WIZGISPlatform">
            <summary>
            GIS
            </summary>
        </member>
        <member name="M:wiz.WIZGISPlatform.From(wiz.WIZPlayer)">
            <summary>
            组件获取方法
            </summary>
            <param name="player">目标Player</param>
            <returns>需要判断是否成功</returns>
            <seealso cref="M:wiz.WIZGISPlatform.isValid"/>
        </member>
        <member name="M:wiz.WIZGISPlatform.isValid">
            <summary>
            判断该组件是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:wiz.WIZGISPlatform.load(System.String)">
            <summary>
            加载倾斜摄影数据
            </summary>
            <param name="fileName">文件名称</param>
        </member>
        <member name="M:wiz.WIZGISPlatform.unload">
            <summary>
            卸载倾斜摄影数据
            </summary>
        </member>
        <member name="M:wiz.WIZGISPlatform.getAabb">
            <summary>
            卸载倾斜摄影数据
            </summary>
        </member>
        <member name="M:wiz.WIZGISPlatform.getNodeAabb">
            <summary>
            卸载倾斜摄影数据
            </summary>
        </member>
        <member name="M:wiz.WIZGISPlatform.calcIntersect(wiz.RayR,wiz.real3@)">
            <summary>
            calcIntersect
            </summary>
        </member>
        <member name="M:wiz.WIZGISPlatform.loadGeometry(System.String)">
            <summary>
            calcIntersect
            </summary>
        </member>
        <member name="M:wiz.WIZGISPlatform.getGeomCount">
            <summary>
            getGeomCount
            </summary>
        </member>
        <member name="M:wiz.WIZGISPlatform.getGeometry(System.UInt32)">
            <summary>
            getGeometry
            </summary>
        </member>
        <member name="T:wiz.WIZIGeometry">
            <summary>
            Geometry
            </summary>
        </member>
        <member name="M:wiz.WIZIGeometry.isValid">
            <summary>
            判断该组件是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:wiz.WIZIGeometry.createNode">
            <summary>
            创建节点
            </summary>
        </member>
        <member name="M:wiz.WIZIGeometry.destroyNode(System.IntPtr)">
            <summary>
            删除节点
            </summary>
        </member>
        <member name="M:wiz.WIZIGeometry.calcRay(wiz.RayR,wiz.real3@)">
            <summary>
            射线测试
            </summary>
        </member>
        <member name="M:wiz.WIZIGeometry.modifyNodeFlag(System.UInt32,System.UInt32)">
            <summary>
            测试修改节点
            </summary>
        </member>
        <member name="T:wiz.WIZNode">
            <summary>
            Node
            </summary>
        </member>
        <member name="M:wiz.WIZNode.isValid">
            <summary>
            判断该组件是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:wiz.WIZNode.getAabb">
            <summary>
            获取包围盒
            </summary>
        </member>
        <member name="M:wiz.WIZNode.setAabb(wiz.aabb3df)">
            <summary>
            设置包围盒
            </summary>
        </member>
        <member name="M:wiz.WIZNode.setScale(wiz.float3)">
            <summary>
            获取包围盒
            </summary>
        </member>
        <member name="M:wiz.WIZNode.getScale">
            <summary>
            获取缩放比例
            </summary>
        </member>
        <member name="M:wiz.WIZNode.setPosition(wiz.float3)">
            <summary>
            获取缩放比例
            </summary>
        </member>
        <member name="M:wiz.WIZNode.getPosition">
            <summary>
            获取缩放比例
            </summary>
        </member>
        <member name="M:wiz.WIZNode.setAngle(System.Single,wiz.float3)">
            <summary>
            设置旋转角度
            </summary>
        </member>
        <member name="M:wiz.WIZNode.getQuat">
            <summary>
            获取旋转数据
            </summary>
        </member>
        <member name="M:wiz.WIZNode.setQuat(wiz.quatf)">
            <summary>
            设置
            </summary>
        </member>
        <member name="M:wiz.WIZNode.getMatrix">
            <summary>
            设置
            </summary>
        </member>
        <member name="M:wiz.WIZNode.updateAabb">
            <summary>
            设置
            </summary>
        </member>
        <member name="T:wiz.nativeWIZGISPlatform">
            <summary>
            C++层导出的接口原形
            </summary>
        </member>
        <member name="M:wiz.nativeWIZGISPlatform.Node_getAabb(System.IntPtr,wiz.aabb3df@)">
            
        </member>
        <member name="T:wiz.WIZMarkerCompoment">
            <summary>
            标记组件
            </summary>
        </member>
        <member name="M:wiz.WIZMarkerCompoment.From(wiz.WIZPlayer)">
            <summary>
            组件获取方法
            </summary>
            <param name="player">目标Player</param>
            <returns>需要判断是否成功</returns>
            <seealso cref="M:wiz.WIZMarkerCompoment.isValid"/>
        </member>
        <member name="M:wiz.WIZMarkerCompoment.isValid">
            <summary>
            判断该组件是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:wiz.WIZMarkerCompoment.newMark">
            <summary>
            通知组件进行新建标记
            </summary>
        </member>
        <member name="M:wiz.WIZMarkerCompoment.selectShape(wiz.MarkerShape)">
            <summary>
            通知组件选择一个形状
            </summary>
            <param name="shp">目标形状</param>
        </member>
        <member name="M:wiz.WIZMarkerCompoment.setLineWidth(System.Int32)">
            <summary>
            设置线段宽度
            </summary>
            <param name="lineWidth">像素</param>
        </member>
        <member name="M:wiz.WIZMarkerCompoment.setLineColor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            设置线段的颜色
            </summary>
            <param name="r">Red</param>
            <param name="g">Green</param>
            <param name="b">Blue</param>
            <param name="a">Alpha</param>
        </member>
        <member name="M:wiz.WIZMarkerCompoment.setFillColor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            设置填充颜色
            </summary>
            <param name="r">Red</param>
            <param name="g">Green</param>
            <param name="b">Blue</param>
            <param name="a">Alpha</param>
        </member>
        <member name="M:wiz.WIZMarkerCompoment.saveMark">
            <summary>
            通知组件保存标记
            </summary>
        </member>
        <member name="M:wiz.WIZMarkerCompoment.tryEdit(System.Boolean)">
            <summary>
            通知标记进入或退出编辑状态
            </summary>
            <param name="bEdit">true为进入，false为退出</param>
        </member>
        <member name="M:wiz.WIZMarkerCompoment.isEdit">
            <summary>
            判断组件是否在编辑状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:wiz.WIZMarkerCompoment.isEdited">
            <summary>
            判断组件自上次保存或打开后是否对标记进行了修改
            </summary>
            <returns></returns>
        </member>
        <member name="M:wiz.WIZMarkerCompoment.removeCurSharp">
            <summary>
            删除当前选中的形状
            </summary>
        </member>
        <member name="M:wiz.WIZMarkerCompoment.deleteCurMark">
            <summary>
            删除当前选中标记
            </summary>
        </member>
        <member name="M:wiz.WIZMarkerCompoment.setCurModel(wiz.WIZModel)">
            <summary>
            设置当前目标模型
            </summary>
            <param name="model"></param>
        </member>
        <member name="T:wiz.WIZMarkerCompoment.Const">
            <summary>
            常量及结构定义
            </summary>
        </member>
        <member name="F:wiz.WIZMarkerCompoment.Const.PMSG_EDIT">
            <summary>
            标记执行了动作的消息名称，该消息附带参数结构为<see cref="T:wiz.MarkerNotice"/>
            </summary>
        </member>
        <member name="F:wiz.WIZMarkerCompoment.Const.PMSG_SELECT">
            <summary>
            选择了标记或形状的消息名称，该消息附带参数结构为<see cref="T:wiz.WIZMarkerCompoment.Const.ParamMarkerSelect"/>
            </summary>
        </member>
        <member name="F:wiz.WIZMarkerCompoment.Const.ParamMarkerSelect.id">
            <summary>
            对象标识
            </summary>
        </member>
        <member name="F:wiz.WIZMarkerCompoment.Const.ParamMarkerSelect.bMark">
            <summary>
            0为选中标记，1为形状
            </summary>
        </member>
        <member name="T:wiz.MarkerShape">
            <summary>
            标记类型,用于选择标记形状
            </summary>
        </member>
        <member name="F:wiz.MarkerShape.Ellipse">
            圆型标记
        </member>
        <member name="F:wiz.MarkerShape.Rect">
            矩形标记
        </member>
        <member name="F:wiz.MarkerShape.Array">
            箭头标记
        </member>
        <member name="F:wiz.MarkerShape.Polygon">
            多边形(折线)标记
        </member>
        <member name="F:wiz.MarkerShape.Curvel">
            曲线标记
        </member>
        <member name="F:wiz.MarkerShape.Lines">
            画笔
        </member>
        <member name="F:wiz.MarkerShape.Text">
            文本标记
        </member>
        <member name="T:wiz.MarkerNotice">
            <summary>
            操作类型,用于标记编辑通知
            </summary>
        </member>
        <member name="F:wiz.MarkerNotice.NewMark">
            新建标记
        </member>
        <member name="F:wiz.MarkerNotice.AddMark">
            添加标记
        </member>
        <member name="F:wiz.MarkerNotice.UpdateMark">
            更新标记
        </member>
        <member name="F:wiz.MarkerNotice.RemoveSelect">
            移除当前选择
        </member>
        <member name="F:wiz.MarkerNotice.DeleteMark">
            删除标记
        </member>
        <member name="F:wiz.MarkerNotice.SelectMark">
            选择标记
        </member>
        <member name="F:wiz.MarkerNotice.LoadMark">
            加载标记
        </member>
        <member name="F:wiz.MarkerNotice.BrowseMark">
            浏览标记
        </member>
        <member name="T:wiz.wizMarkerNative">
            <summary>
            C++层导出的接口原形
            </summary>
        </member>
        <member name="T:wiz.WIZObliquePhotograph">
            <summary>
            模型树组件
            </summary>
        </member>
        <member name="M:wiz.WIZObliquePhotograph.From(wiz.WIZPlayer)">
            <summary>
            组件获取方法
            </summary>
            <param name="player">目标Player</param>
            <returns>需要判断是否成功</returns>
            <seealso cref="M:wiz.WIZObliquePhotograph.isValid"/>
        </member>
        <member name="M:wiz.WIZObliquePhotograph.isValid">
            <summary>
            判断该组件是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:wiz.WIZObliquePhotograph.load(System.String)">
            <summary>
            加载倾斜摄影数据
            </summary>
            <param name="fileName">文件名称</param>
        </member>
        <member name="M:wiz.WIZObliquePhotograph.unload">
            <summary>
            卸载倾斜摄影数据
            </summary>
        </member>
        <member name="M:wiz.WIZObliquePhotograph.getAabb">
            <summary>
            卸载倾斜摄影数据
            </summary>
        </member>
        <member name="M:wiz.WIZObliquePhotograph.getAbsAabb">
            <summary>
            卸载倾斜摄影数据
            </summary>
        </member>
        <member name="M:wiz.WIZObliquePhotograph.calcIntersect(wiz.RayR,wiz.real3@)">
            <summary>
            calcIntersect
            </summary>
        </member>
        <member name="M:wiz.WIZObliquePhotograph.moveCameraTo">
            <summary>
            calcIntersect
            </summary>
        </member>
        <member name="T:wiz.nativeObliquePhotograph">
            <summary>
            C++层导出的接口原形
            </summary>
        </member>
        <member name="T:wiz.WIZModel">
            <summary>
            WIZModel，包含了Model的句柄，和其方法包装
            </summary>
        </member>
        <member name="M:wiz.WIZModel.getKey">
            <summary>
            获取模型唯一标识
            </summary>
            <returns></returns>
        </member>
        <member name="T:wiz.WIZPlayer">
            <summary>
            WIZPlayer，包含了Player的句柄，和其方法包装
            </summary>
        </member>
        <member name="F:wiz.WIZPlayer.ptr">
            <summary>
            Player句柄
            </summary>
        </member>
        <member name="M:wiz.WIZPlayer.CreateInstance">
            <summary>
            创建方法
            </summary>
        </member>
        <member name="M:wiz.WIZPlayer.destory">
            <summary>
            销毁Player
            </summary>
        </member>
        <member name="M:wiz.WIZPlayer.op_Implicit(System.IntPtr)~wiz.WIZPlayer">
            <summary>
            添加从Player句柄到Player类的自动装箱方法
            </summary>
            <param name="p">Player句柄</param>
        </member>
        <member name="M:wiz.WIZPlayer.start(System.IntPtr,System.String,System.String)">
            <summary>
            启动Player
            </summary>
            <remarks>该方法为异步方法，需要监听"engine.init"消息</remarks>
            <param name="hParent">要附加的窗口句柄</param>
            <param name="resourcePath">资源目录，默认是../data</param>
            <param name="logFile">日志文件，默认是./log.xml</param>
        </member>
        <member name="M:wiz.WIZPlayer.isRunning">
            <summary>
            判断Player是否正在运行
            </summary>
            <seealso cref="M:wiz.WIZPlayer.start(System.IntPtr,System.String,System.String)"/>
        </member>
        <member name="M:wiz.WIZPlayer.setRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置Player的显示区域
            </summary>
            <param name="x">left</param>
            <param name="y">top</param>
            <param name="w">width</param>
            <param name="h">heigh</param>
        </member>
        <member name="M:wiz.WIZPlayer.addMessageHandler(System.String,wiz.MessageHandler)">
            <summary>
            添加Player消息监听
            </summary>
            <param name="message">要监听的消息名称</param>
            <param name="handler">监听回调函数</param>
        </member>
        <member name="M:wiz.WIZPlayer.removeMessageHandler(System.String,wiz.MessageHandler)">
            <summary>
            移出Player消息监听
            </summary>
            <param name="message">要移出的消息名称</param>
            <param name="handler">要移出的回调函数</param>
        </member>
        <member name="M:wiz.WIZPlayer.sendMessage(System.String,System.IntPtr,System.Boolean)">
            <summary>
            向Player发送消息
            </summary>
            <param name="message">消息名称</param>
            <param name="param">参数</param>
            <param name="async">是否为异步消息</param>
        </member>
        <member name="M:wiz.WIZPlayer.setFocus">
            <summary>
            设置Player窗口为Focus窗口
            </summary>
            <remarks>一些Window7/XP系统，当窗口没有Focus时无法得到鼠标滚轮消息</remarks>
            <returns></returns>
        </member>
        <member name="M:wiz.WIZPlayer.loadPlugins(System.String,System.String)">
            <summary>
            加载指定目录下的所有插件
            </summary>
            <param name="dir">插件目录</param>
            <param name="ext">插件文件扩展名称</param>
        </member>
        <member name="M:wiz.WIZPlayer.loadModel(System.String)">
            <summary>
            加载一个模型
            </summary>
            <param name="file">模型文件路径</param>
        </member>
        <member name="M:wiz.WIZPlayer.closeModel(wiz.WIZModel)">
            <summary>
            关闭模型
            </summary>
            <param name="model">要关闭的模型句柄</param>
        </member>
        <member name="M:wiz.WIZPlayer.setCurTool(wiz.WIZTool)">
            <summary>
            选则当前工具
            </summary>
            <param name="tool">工具</param>
        </member>
        <member name="M:wiz.WIZPlayer.getCompoment(System.String)">
            <summary>
            获取组件
            </summary>
            <param name="name">组件名称</param>
            <returns>组件对象，通过其ptr判断是否获取成功</returns>
        </member>
        <member name="T:wiz.WIZPlayer.Const">
            <summary>
            常量及结构定义
            </summary>
        </member>
        <member name="F:wiz.WIZPlayer.Const.PMSG_INIT">
            <summary>
            Player初始化消息名称，该消息没有参数
            </summary>
        </member>
        <member name="F:wiz.WIZPlayer.Const.PMSG_LOADMODEL">
            <summary>
            Player加载模型消息名称，该消息附带参数结构为<see cref="T:wiz.WIZPlayer.Const.ParamLoadModel"/>
            </summary>
        </member>
        <member name="F:wiz.WIZPlayer.Const.PMSG_CLOSEMODEL">
            <summary>
            Player关闭模型消息名称，该消息附带参数结构为<see cref="T:wiz.WIZModel"/>
            </summary>
        </member>
        <member name="F:wiz.WIZPlayer.Const.PMSG_SELECTTOOL">
            <summary>
            Player切换工具消息名称，该消息附带参数结构为<see cref="T:wiz.WIZPlayer.Const.ParamSelectTool"/>
            </summary>
        </member>
        <member name="F:wiz.WIZPlayer.Const.PMSG_REGISTERTOOL">
            <summary>
            Player注册工具消息名称，该消息附带参数结构为<see cref="T:wiz.WIZTool"/>
            </summary>
        </member>
        <member name="T:wiz.MessageHandler">
            <summary>
            接受Player消息的委托原型
            </summary>
            <param name="player">发送消息的Player</param>
            <param name="param">消息参数</param>
        </member>
        <member name="T:wiz.wizPlayerNative">
            <summary>
            C++层导出的接口原形
            </summary>
        </member>
        <member name="T:wiz.WIZShpCompoment">
            <summary>
            Shape组件
            </summary>
        </member>
        <member name="M:wiz.WIZShpCompoment.From(wiz.WIZPlayer)">
            <summary>
            组件获取方法
            </summary>
            <param name="player">目标Player</param>
            <returns>需要判断是否成功</returns>
            <see cref="M:wiz.WIZShpCompoment.isValid"/>
        </member>
        <member name="M:wiz.WIZShpCompoment.isValid">
            <summary>
            判断该组件是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:wiz.WIZShpCompoment.load(System.String)">
            <summary>
            加载Shape对象
            </summary>
            <param name="file">.shp文件</param>
            <returns>需要判断是否成功</returns>
            <see cref="M:wiz.ShapeObject.isValid"/>
        </member>
        <member name="T:wiz.ShapeObject">
            <summary>
            Shape对象
            </summary>
        </member>
        <member name="M:wiz.ShapeObject.isValid">
            <summary>
            判断该组件是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:wiz.ShapeObject.release">
            <summary>
            释放Shape对象
            </summary>
        </member>
        <member name="M:wiz.ShapeObject.getFieldCount">
            <summary>
            获取数据字段个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:wiz.ShapeObject.getFieldName(System.Int32)">
            <summary>
            获取数据字段名称
            </summary>
            <param name="fieldIdx">字段索引</param>
            <returns></returns>
        </member>
        <member name="T:wiz.wizShpNative">
            <summary>
            C++层导出的接口原形
            </summary>
        </member>
        <member name="T:wiz.WIZTool">
            <summary>
            WIZTool，包含了Tool的句柄，和其方法的包装
            </summary>
        </member>
        <member name="M:wiz.WIZTool.getGroupName(System.Int32)">
            <summary>
            获取工具的分组名称
            </summary>
            <param name="lev">名称级别，可能有多级分组</param>
            <returns>名称</returns>
        </member>
        <member name="M:wiz.WIZTool.getDisplayName(System.Int32)">
            <summary>
            获取工具的显示名称
            </summary>
            <param name="lev">名称级别，可能有多级分组</param>
            <returns>名称</returns>
        </member>
        <member name="M:wiz.WIZTool.getName">
            <summary>
            获取工具的名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:wiz.wizToolNative">
            <summary>
            C++层导出的接口原形
            </summary>
        </member>
        <member name="T:wiz.WIZTreeCompoment">
            <summary>
            模型树组件
            </summary>
        </member>
        <member name="M:wiz.WIZTreeCompoment.From(wiz.WIZPlayer)">
            <summary>
            组件获取方法
            </summary>
            <param name="player">目标Player</param>
            <returns>需要判断是否成功</returns>
            <seealso cref="M:wiz.WIZTreeCompoment.isValid"/>
        </member>
        <member name="M:wiz.WIZTreeCompoment.isValid">
            <summary>
            判断该组件是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:wiz.WIZTreeCompoment.setParent(System.IntPtr)">
            <summary>
            设置父窗口
            </summary>
            <param name="parent">父窗口句柄</param>
        </member>
        <member name="M:wiz.WIZTreeCompoment.setRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置显示区域
            </summary>
            <param name="x">left</param>
            <param name="y">top</param>
            <param name="w">width</param>
            <param name="h">height</param>
        </member>
        <member name="T:wiz.wizTreeNative">
            <summary>
            C++层导出的接口原形
            </summary>
        </member>
        <member name="T:wiz.aabb3dr">
            <summary>
            aabb3dr
            </summary>
        </member>
    </members>
</doc>
